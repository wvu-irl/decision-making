#### TODO

## Documentation

## states

Need a get actions function


## Actions

Need to specify epsilon, delta bounds
Need strategies for removing dominated actions

## Solvers

Write AVI
Write AMCGS
Write UCT
Write MCGS
Write bounds computation class


## BF

Test Base Code
Write Class for Arbitration techniques
May need to extend to take in an ID, value, and mass 


## Testing

Select Real and Virtual test scenarios
Develop testing assay
Do a timed test on building a dict then overwriting keys and building a dict over time


### Assorted notes

For transition, we will assume it is a behavior of the solver to augment the model with upper and lower bounds. Actions will just treat outcomes as distributions

For BF it assumes elements are hashable, I would assume I can just pass in the hashkeys themselves (i think strings are hashable)

How to handle distributions and optimization... I think probably pass the state to the optimizer. Does python pass pointers? If so then I can pas the pointer to the solver and use to get states...


LET OPTIMIZER FORMULATE BF function, but the state-action just stores the basic number of samples and transition, etc. 
    The only issue is if we need to extract reward obersvations to build a bigger distribution. 

How to compute upper and lower bounds? Need to look at one paper

Need to think about how to incorporate value and reward. 

It is expected that solvers will go hash -> ind -> obj
    So dict captures hashes,
    then list holds objects

## Action Selection

Add action selection classes and children

https://stackoverflow.com/questions/1298636/how-to-set-initial-size-for-a-dictionary-in-python